generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ===== 기존 테이블 그대로 ===== */
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
  balance  Decimal  @db.Decimal(65, 30)

  holdings          Holding[]
  trades            Trade[]
  transfers         Transfer[]
  tickets           SupportTicket[]
  balanceSnapshots  BalanceSnapshot[]
}

model Holding {
  id       Int      @id @default(autoincrement())
  symbol   String
  amount   Float
  userId   Int
  user     User     @relation(fields: [userId], references: [id])

  @@index([userId, symbol])
}

/* ===== 신규 테이블 추가 (가격/차트 없음) ===== */
model Asset {
  id           Int       @id @default(autoincrement())
  coingeckoId  String    @unique // 이제 필수
  symbol       String
  name         String
  status       AssetStatus @default(ACTIVE)
  precision    Int         @default(18)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  trades       Trade[]
  transfers    Transfer[]
  balanceSnapshots BalanceSnapshot[]

  @@index([symbol])
}

enum AssetStatus {
  ACTIVE
  INACTIVE
  DELISTED
}

model Trade {
  id          Int       @id @default(autoincrement())
  userId      Int
  assetId     Int
  side        TradeSide
  orderType   OrderType            // ✅ 신규 추가
  quantity    Decimal              @db.Decimal(38, 18)
  price       Decimal              @db.Decimal(38, 18)   // 체결가 (MARKET도 체결가 기록 필요)
  fee         Decimal              @db.Decimal(38, 18)
  feeCurrency String               @default("KRW")
  executedAt  DateTime
  priceSource String               @default("coingecko")
  priceAsOf   DateTime
  orderId     String?
  externalRef String?

  user   User   @relation(fields: [userId], references: [id])
  asset  Asset  @relation(fields: [assetId], references: [id])

  @@index([userId, executedAt])
  @@index([assetId, executedAt])
  @@index([orderId])
}

enum TradeSide {
  BUY
  SELL
}

enum OrderType {
  MARKET
  LIMIT
}

model Transfer {
  id           Int             @id @default(autoincrement())
  userId       Int
  user         User            @relation(fields: [userId], references: [id])

  type         TransferType
  status       TransferStatus

  assetId      Int
  asset        Asset           @relation(fields: [assetId], references: [id])

  amount       Decimal         @db.Decimal(38, 18)
  fee          Decimal?        @db.Decimal(38, 18)
  network      String?
  address      String?
  txId         String?
  requestedAt  DateTime        @default(now())
  processedAt  DateTime?

  @@index([userId, requestedAt])
  @@index([assetId, requestedAt])
  @@index([type, status])
  @@index([txId])
}

enum TransferType {
  DEPOSIT
  WITHDRAWAL
}

enum TransferStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELED
}

model BalanceSnapshot {
  id       Int       @id @default(autoincrement())
  userId   Int
  user     User      @relation(fields: [userId], references: [id])

  assetId  Int
  asset    Asset     @relation(fields: [assetId], references: [id])

  amount   Decimal   @db.Decimal(38, 18)
  takenAt  DateTime  @default(now())

  @@unique([userId, assetId, takenAt])
  @@index([userId, takenAt])
}

model SupportTicket {
  id          Int              @id @default(autoincrement())
  userId      Int
  user        User             @relation(fields: [userId], references: [id])

  title       String
  status      TicketStatus     @default(OPEN)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  messages    TicketMessage[]

  @@index([userId, updatedAt])
  @@index([status, updatedAt])
}

model TicketMessage {
  id         Int           @id @default(autoincrement())
  ticketId   Int
  ticket     SupportTicket @relation(fields: [ticketId], references: [id])

  authorType MessageAuthor @default(USER)
  body       String
  createdAt  DateTime      @default(now())

  @@index([ticketId, createdAt])
}

enum TicketStatus {
  OPEN
  PENDING
  RESOLVED
  CLOSED
}

enum MessageAuthor {
  USER
  ADMIN
}

// === 멱등키 관리용 ===
enum IdemStatus {
    PROCESSING
    DONE
}

model IdempotencyKey {
    id          Int         @id @default(autoincrement())
    userId      Int
    scope       String
    key         String
    status      IdemStatus  @default(PROCESSING)
    response    Json?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@unique([userId, scope, key])
    @@index([createdAt])
}